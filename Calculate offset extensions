""" This script calculates the extension of the offset lines given the offsets and the angle between the offset lines"""
import math

def main():
    x, y = get_offsets()
    angle = get_angle(angle_type = "Corner")
    sin_ang = math.sin(dms_to_rad(angle))
    cos_ang = math.cos(dms_to_rad(angle))
    
    if float(angle) < 90:
        ns_ext = (x + y * cos_ang)/ sin_ang
        ew_ext = (y + x * cos_ang)/ sin_ang
    if float(angle) == 90:
        ns_ext = x
        ew_ext = y
    else:
        angle = dms_to_rad(180)-dms_to_rad(angle)
        ns_ext = (x - y * cos_ang)/ sin_ang
        ew_ext = (y - x * cos_ang)/ sin_ang
    print(f"North-south offset extension= {round(ns_ext,3)}")
    print(f"East-west offset extension= {round(ew_ext, 3)}")


def get_offsets ():
    """this function gets the offset dimensions"""
    while True:
        try: 
            x = float(input("North-South Offset: "))
            y = float(input("East-West Offset: "))
            return x, y
        except ValueError:
            print ("Invalid input. Enter a number")

def get_angle(angle_type):
    """ The function validates an angle input. The angle is degrees, minutes, seconds
    entered as ddd.mmss"""
    while True:
        try:
            angle = input(f"{angle_type} angle (ddd.mmss): ")
            float(angle)
            if '.' in angle:
                deg, min_sec = angle.split(".")
                if int(deg) <= 180:
                    if len(min_sec) < 1:
                        degrees = int(deg)
                        angle = str(degrees) + "." + "0000"
                        return angle
                    elif len(min_sec) == 1:
                        print("Enter two digits for minutes and seconds ddd.mmss")
                        continue
                    elif len(min_sec) == 2:
                        degrees = deg
                        minutes = min_sec[:2]
                        angle = degrees + "." + minutes + "00"
                        return angle
                    elif len(min_sec) == 3:
                        print("Enter two digits for seconds ddd.mmss")
                        continue
                    elif len(min_sec) == 4:
                        minutes = min_sec[:2]
                        seconds = min_sec[2:]
                        if int(minutes) < 60:
                            if int(seconds) < 60:
                                degrees = deg
                                minutes = min_sec[:2]
                                seconds = min_sec[2:]
                                angle = degrees + "." + minutes + seconds
                                return angle
                            else:
                                print("Seconds cannot be more than 59")
                                continue
                        else:
                            print("Minutes cannot be more than 59")
                            continue
                    else:
                        print("Angle cannot have decimal seconds")
                        continue
                else:
                    print("Angle cannot be more than 180 degrees")
                    continue
            else:
                if int(angle) < 180:
                    degrees = str(angle)
                    minutes = "00"
                    seconds = "00"
                    angle = degrees + "." + minutes + seconds
                    return angle
                else:
                    print("Angle cannot be more or equal to 180 degrees")
                    continue
        except ValueError:
            print("Angle needs to be of this format ddd.mmss")
            continue

def dms_to_rad(dms):
    """function converts angle expressed as ddd.mmss (degrees minutes seconds) to radians"""
    while True:
        try:
            degrees, minutes_seconds = dms.split(".")
            degrees = int(degrees)
            minutes = minutes_seconds[:2]
            seconds = minutes_seconds[2:]
            angle_decimal = degrees + int(minutes)/60 + int(seconds)/3600
            angle_radians = math.radians(angle_decimal)
            return angle_radians
        except ValueError:
            print("ddd.mmss")
            break


if __name__ == "__main__":
    main()


